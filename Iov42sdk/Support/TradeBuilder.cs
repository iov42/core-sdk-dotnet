using System;
using System.Collections.Generic;
using System.Numerics;
using Iov42sdk.Connection;
using Iov42sdk.Models;
using Iov42sdk.Models.Headers;
using Iov42sdk.Models.Transfers;

namespace Iov42sdk.Support
{
    /// <summary>
    /// Helps build trade requests and the process of multiple signings if required
    /// </summary>
    public class TradeBuilder
    {
        private readonly IPlatformClient _client;
        private readonly List<SingleTransfer> _transfers = new List<SingleTransfer>();
        private string _bodyText;
        private string _requestId;
        private readonly Authorisation[] _externalAuthorisations = Array.Empty<Authorisation>();

        /// <summary>
        /// First step in building the trade request
        /// </summary>
        /// <param name="client">The client that will authorize the request</param>
        public TradeBuilder(IPlatformClient client)
        {
            _client = client;
        }

        /// <summary>
        /// Build on the authorisations passed in by adding an authorisation by this client
        /// </summary>
        /// <param name="client">The client that will authorize the request</param>
        /// <param name="tradeAuthorisations">The authorisation generated by another party in the chain of authorisations</param>
        public TradeBuilder(IPlatformClient client, TradeAuthorisations tradeAuthorisations)
        {
            _client = client;
            _requestId = tradeAuthorisations.RequestId;
            _bodyText = tradeAuthorisations.BodyText;
            _externalAuthorisations = tradeAuthorisations.Authorisations;
        }

        /// <summary>
        /// Add an ownership transfer to the transfers to authorize and send
        /// </summary>
        /// <param name="assetId">The asset to transfer</param>
        /// <param name="assetTypeId">The asset type</param>
        /// <param name="fromIdentityId">The source identity</param>
        /// <param name="toIdentityId">The destination identity</param>
        /// <returns></returns>
        public TradeBuilder AddOwnershipTransfer(string assetId, string assetTypeId, string fromIdentityId, string toIdentityId)
        {
            _transfers.Add(new TransferOwnership(assetId, assetTypeId, fromIdentityId, toIdentityId));
            _bodyText = null;
            return this;
        }

        /// <summary>
        /// Add a quantity transfer to the transfers to authorize and send
        /// </summary>
        /// <param name="fromAssetId">The souce account</param>
        /// <param name="toAssetId">The destination account</param>
        /// <param name="assetTypeId">The asset type</param>
        /// <param name="quantity">The quantity</param>
        /// <returns></returns>
        public TradeBuilder AddQuantityTransfer(string fromAssetId, string toAssetId, string assetTypeId, BigInteger quantity)
        {
            _transfers.Add(new TransferQuantity(fromAssetId, toAssetId, assetTypeId, quantity.ToString()));
            _bodyText = null;
            return this;
        }

        /// <summary>
        /// Generate the authorisation details that can be passed on to the next signer in the chain
        /// </summary>
        /// <returns></returns>
        public TradeAuthorisations GenerateAuthorisations()
        {
            var authorisations = Update();
            return new TradeAuthorisations(_requestId, _bodyText, authorisations);
        }

        /// <summary>
        /// Build the write request to send to the core platform
        /// </summary>
        /// <returns>The request </returns>
        public PlatformWriteRequest Build()
        {
            var authorisations = Update();
            return new PlatformWriteRequest(_requestId, _bodyText, authorisations);
        }

        private Authorisation[] Update()
        {
            if (_bodyText == null)
            {
                var body = new TransfersBody(_transfers.ToArray());
                _requestId = body.RequestId;
                _bodyText = body.Serialize();
            }
            var authorisations = new List<Authorisation>(_externalAuthorisations) { _client.GenerateAuthorisation(_bodyText) };
            return authorisations.ToArray();
        }
    }
}
